import sys
import os
import pandas as pd
import numpy as np
import re


# os.path
for dirname, _, filenames in os.walk(path):
  for filename in filenames:
    print(os.path.join(dirname, filename))
    

# read_csv
test = pd.read_csv(path)


# 인코딩
encoding = "utf-8" # euc-kr, default 값 설정
encoding = "cp949" # 한글이 깨질경우 사용


# re
re.sub(pattern, replacement, str) # str 에서 pattern과 일치하는 내용을 replacement로 변경
re.split(' ', test) # test에서 ' ' 안의 내용으로 split
re.search(r'\\', s) # 원시 문자열(raw string)을 사용해 <regex>를 지정

모듈 함수	설명
re.compile()	정규표현식을 컴파일하는 함수입니다. 다시 말해, 파이썬에게 전해주는 역할을 합니다. 찾고자 하는 패턴이 빈번한 경우에는 미리 컴파일해놓고 사용하면 속도와 편의성면에서 유리합니다.
re.search()	문자열 전체에 대해서 정규표현식과 매치되는지를 검색합니다.
re.match()	문자열의 처음이 정규표현식과 매치되는지를 검색합니다.
re.split()	정규 표현식을 기준으로 문자열을 분리하여 리스트로 리턴합니다.
re.findall()	문자열에서 정규 표현식과 매치되는 모든 경우의 문자열을 찾아서 리스트로 리턴합니다. 만약, 매치되는 문자열이 없다면 빈 리스트가 리턴됩니다.
re.finditer()	문자열에서 정규 표현식과 매치되는 모든 경우의 문자열에 대한 이터레이터 객체를 리턴합니다.
re.sub()	문자열에서 정규 표현식과 일치하는 부분에 대해서 다른 문자열로 대체합니다.


# list to str
result = ' '.join(s for s in 리스트)
result = ' '.join(mpa(str, 리스트))


# 숫자 받기
a,b,c = map(int, input().split())


# shutil 라이브러리, 경로간 파일 복사
import shutil
shutil.copyfile(src, dst, *, follow_symlinks=True) # src와 dst의 파일 이름 동일시 SameFileError 발생
shutil.copy(src, dst, *, follow_symlinks=True)     # metadata 정보는 불가
shutil.copy2                                       # 
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False, dirs_exist_ok=False)  # src를 dst로 복사


# 한글 우회 방법
from PIL import ImageFont, ImageDraw, Image

def myPutText(src, text, pos, font_size, font_color):
    img_pil = Image.fromarray(src)
    draw = ImageDraw.Draw(img_pil)
    font = ImageFont.truetype("fonts/gulim.ttc", font_size)
    draw.text(pos, text, font=font, fill=font_color)
    return np.array(img_pil)



# 16 진수 구구단 출력
a = int(input(),16)
for i in range(1,16):
    print('%X'%a, '*%X'%i, '=%X'%(a*i), sep='')    
    # print('%X'%n) -> n에 저장되어있는 값을 16진수(hexadecimal)형태로 출력
    # 작은 따옴표 2개로 print(..., sep='')으로 출력 시 공백없이 모두 붙어 출력된다.
    # 작은 따옴표 2개 '' 또는 큰 따옴표 2개 ""는 아무 문자도 없는 빈문자여(empty string)을 의미한다.
    
 
# 색깔 개수 만들기
r, g, b = map(int, input().split())

count = 0

for i in range(0, r):
    for x in range(0, g):
        for l in range(0, b):
            print(i, x, l, sep=' ')
            count +=1

print(count)


# h(Hz), b(bit), c(Channel), s(Second), 필요한 공간 계산
h, b, c, s = map(int, input().split())

result = h*b*c*s
res1 = result / 8 # bit
res2 = res1 / 1024 # KB
res3 = res2 / 1024 # MB
print(round(res3, 1), 'MB')


# 재귀함수
def function(n):
    if n == 0:
        return
    else:
        print(n)
        function(n-1)
    
function(3)


# 2차원 리스트
a = []

for i in range(10):
        line = []
        for j in range(10):
                line.append(0)
        a.append(line)

a = [[0 for j in range(10)] for i in range(10)]



vin = []        # 빈 리스트 만들기

for i in range(10):
    vin.append([])      # 리스트 안에 다른 리스트 추가
    for j in range(10):
        vin[i].append(0)    # 리스트 안에 들어있는 리스트 안에 0 추가


for i in range(10):
    for j in range(10):
        print(vin[i][j], end='')    # 공백을 두고 한 줄로 출력
    print()     # 줄바꿈


# str 데이터의 주차 구하기
import datetime
data = '2022-12-23'

def get_week_num(data) -> int:
    temp_data = data.split('-')
    text = datetime.date(
        year = int(temp_data[0]),
        month = int(temp_data[1]),
        day = int(temp_data[2])).strftime('%V')
    return text

get_week_num(data)


# data가 timedelata일 경우
from datetime import datetime

date = datetime.now().isocalendar()
print(date)
print(date[0])
print(f'First is year, {date[0]}.')
print(date[1])
print(f'Second is week number, {date[1]}.')
print(date[2])
print(f'Last is weekday, {date[2]}.\n')


# 파일 불러오는 클래스 생성 및 사용
class MyFileWriter():
    def __init__(self, file_name, method):
        print('MyFileWriter started : __init__')
        self.file_obj = open(file_name, method)
        
    def __enter__(self):
        print('MyFileWriter started : __enter__')
        return self.file_obj
    
    def __exit__(self, exc_type, value, trace_back):
        print('MyFileWriter started : __exit__')
        if exc_type:
            print('Logging exception {}'.format((exc_type, value, trace_back)))
        self.file_obj.close()

with MyFileWriter('./testfile3.txt', 'w') as f:
    f.write('Context Manager Test3\nContextlib Test3')


# 코드 시간 계산
import time

class ExcuteTimer(object):
    def __init__(self, msg):
        self._msg = msg
        
    def __enter__(self):
        self._start = time.monotonic()  # 시간을 숫자형태로 가져와서 start 변수에 저장
        return self._start
    
    def __exit__(self, exc_type, exc_value, exc_traceback):
        if exc_type:
            print("Logging exception {}".format((exc_type, exc_value, exc_traceback)))
        else:
            print('{} : {} s'.format(self._msg, time.monotonic() - self._start))
        return True  # 엄격하게 명시할때 사용

# 사용 예시
with ExcuteTimer('Start! job') as v:
    print('Received start monotonic1 : {}'.format(v))
    # Excute job
    for i in range(10000000):
        pass
    raise Exception('Raise! Exception!!') # 강제로 발생
